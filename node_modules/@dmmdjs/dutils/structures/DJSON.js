"use strict";

/**
 * Extension of JSON module
 * 
 * **WARNING**: INCOMPLETE
 * - To Do: Create own JSON parser and stringifier
 * @extends null
 */
class DJSON extends null {

    /**
     * Returns whether or not a value is a valid JSON
     * @static
     * @param {any} v Value
     * @returns {boolean}
     */
    static isJSON(v) {
        if(typeof r !== "function" && r === undefined) throw new TypeError("Argument is not a function");
        try {
            JSON.parse(v, r);
            return true;
        }
        catch {
            return false;
        };
    };
    
    /**
     * Parses a JSON
     * @static
     * @param {any} v Value
     * @param {function(any, string, any)} r Reviver
     * @returns {any}
     */
    static parse(v, r) {
        if(typeof r !== "function" && r === undefined) throw new TypeError("Argument is not a function");
        if(!DJSON.isJSON(v, r)) throw new TypeError("Argument is not a valid JSON"); 
        return JSON.parse(v, r);
    };

    /**
     * Standardlizes a value into JSON format
     * @static
     * @param {any} v Value
     * @returns {any}
     */
    static standardize(v) {
        if(!DJSON.isJSON(v)) throw new TypeError("Argument is not a valid JSON"); 
        return JSON.parse(JSON.stringify(v));
    };

    /**
     * Returns a stringified and serialized string containing JSON data
     * @static
     * @param {any} v Value
     * @param {function(any, string, any)} r Replacer
     * @param {string|number} s Space
     * @returns 
     */
    static stringify(v, r, s) {
        return JSON.stringify(v, r, s);
    };
};

// Exports
module.exports = DJSON;