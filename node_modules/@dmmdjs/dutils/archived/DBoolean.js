"use strict";

/**
 * Advanced prototype of JavaScript boolean
 */
class DBoolean {
    #b;

    /**
     * Creates a new dboolean
     * @param {any} v Value
     */
    constructor(v) {
        this.#b = !!v;
    };

    /**
     * Creates a new dboolean from an existing boolean or value
     * @static
     * @param {any} v Value
     * @returns {DBoolean}
     */
    static from(v) {
        return new DBoolean(v);
    };

    /**
     * Inverts the current boolean
     * @returns {boolean}
     */
    invert() {
        this.#b = !this.#b;
        return this.#b;
    };

    /**
     * Parses a boolean
     * @static
     * @param {any} v Value
     * @returns {boolean}
     */
    static parse(v) {
        if(v === true || v === "true") return true;
        else if(v === false || v === "false") return false;
        else return undefined;
    };

    /**
     * Returns this dboolean as a JavaScript boolean
     * @returns {boolean}
     */
    toBoolean() {
        return this.#b;
    };

    /**
     * Returns this dobject as a JavaScript string
     * @returns {string}
     */
    toString() {
        return this.#b ? "true" : "false";
    };

    /**
     * Returns this dboolean as a JavaScript boolean
     * @returns {any[]}
     */
    valueOf() {
        return this.toBoolean();
    };
};

// Exports
module.exports = DBoolean;