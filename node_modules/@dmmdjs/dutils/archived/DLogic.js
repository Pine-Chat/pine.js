"use strict";

/**
 * Logic gate class
 * @extends null
 */
class DLogic extends null {
    /**
     * Returns an and gate
     * @static
     * @param {boolean} a Boolean
     * @param {boolean} b Boolean
     * @returns {boolean}
     */
    static and(a, b) {
        return !!a && !!b;
    };

    /**
     * Returns a buffer gate
     * @static
     * @param {boolean} v Boolean
     * @returns {boolean}
     */
    static buffer(v) {
        return !!v;
    };

    /**
     * Returns a nand gate
     * @static
     * @param {boolean} a Boolean
     * @param {boolean} b Boolean
     * @returns {boolean}
     */
    static nand(a, b) {
        return !DBoolean.and(a, b);
    };

    /**
     * Returns a nor gate
     * @static
     * @param {boolean} a Boolean
     * @param {boolean} b Boolean
     * @returns {boolean}
     */
    static nor(a, b) {
        return !DBoolean.or(a, b);
    };

    /**
     * Returns a not gate
     * @static
     * @param {boolean} v Boolean
     * @returns {boolean}
     */
    static not(v) {
        return !v;
    };

    /**
     * Returns an or gate
     * @static
     * @param {boolean} a Boolean
     * @param {boolean} b Boolean
     * @returns {boolean}
     */
    static or(a, b) {
        return !!a || !!b;
    };

    /**
     * Returns an xnor gate
     * @static
     * @param {boolean} a Boolean
     * @param {boolean} b Boolean
     * @returns {boolean}
     */
    static xnor(a, b) {
        return !this.nor(a, b);
    };

    /**
     * Returns an xor gate
     * @static
     * @param {boolean} a Boolean
     * @param {boolean} b Boolean
     * @returns {boolean}
     */
    static xor(a, b) {
        return !!a !== !!b;
    };
};

// Exports
module.exports = DLogic;